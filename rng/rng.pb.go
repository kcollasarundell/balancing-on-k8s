// Code generated by protoc-gen-go.
// source: rng.proto
// DO NOT EDIT!

/*
Package rng is a generated protocol buffer package.

It is generated from these files:
	rng.proto

It has these top-level messages:
	Source
	RN
*/
package rng

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Source struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Source) Reset()                    { *m = Source{} }
func (m *Source) String() string            { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()               {}
func (*Source) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Source) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type RN struct {
	RN int64 `protobuf:"varint,1,opt,name=RN" json:"RN,omitempty"`
}

func (m *RN) Reset()                    { *m = RN{} }
func (m *RN) String() string            { return proto.CompactTextString(m) }
func (*RN) ProtoMessage()               {}
func (*RN) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *RN) GetRN() int64 {
	if m != nil {
		return m.RN
	}
	return 0
}

func init() {
	proto.RegisterType((*Source)(nil), "rng.Source")
	proto.RegisterType((*RN)(nil), "rng.RN")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Rng service

type RngClient interface {
	Rng(ctx context.Context, in *Source, opts ...grpc.CallOption) (*RN, error)
}

type rngClient struct {
	cc *grpc.ClientConn
}

func NewRngClient(cc *grpc.ClientConn) RngClient {
	return &rngClient{cc}
}

func (c *rngClient) Rng(ctx context.Context, in *Source, opts ...grpc.CallOption) (*RN, error) {
	out := new(RN)
	err := grpc.Invoke(ctx, "/rng.rng/rng", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Rng service

type RngServer interface {
	Rng(context.Context, *Source) (*RN, error)
}

func RegisterRngServer(s *grpc.Server, srv RngServer) {
	s.RegisterService(&_Rng_serviceDesc, srv)
}

func _Rng_Rng_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Source)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RngServer).Rng(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/rng.rng/Rng",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RngServer).Rng(ctx, req.(*Source))
	}
	return interceptor(ctx, in, info, handler)
}

var _Rng_serviceDesc = grpc.ServiceDesc{
	ServiceName: "rng.rng",
	HandlerType: (*RngServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "rng",
			Handler:    _Rng_Rng_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "rng.proto",
}

func init() { proto.RegisterFile("rng.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 109 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2c, 0xca, 0x4b, 0xd7,
	0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x2e, 0xca, 0x4b, 0x57, 0x92, 0xe1, 0x62, 0x0b, 0xce,
	0x2f, 0x2d, 0x4a, 0x4e, 0x15, 0x12, 0xe2, 0x62, 0xc9, 0x4b, 0xcc, 0x4d, 0x95, 0x60, 0x54, 0x60,
	0xd4, 0xe0, 0x0c, 0x02, 0xb3, 0x95, 0x44, 0xb8, 0x98, 0x82, 0xfc, 0x84, 0xf8, 0x40, 0x24, 0x58,
	0x9c, 0x39, 0x88, 0x29, 0xc8, 0xcf, 0x48, 0x89, 0x0b, 0xa4, 0x55, 0x48, 0x1a, 0x42, 0x71, 0xeb,
	0x81, 0x8c, 0x84, 0x18, 0x22, 0xc5, 0x0e, 0xe6, 0x04, 0xf9, 0x25, 0xb1, 0x81, 0xed, 0x30, 0x06,
	0x04, 0x00, 0x00, 0xff, 0xff, 0xe9, 0x0c, 0x11, 0xc9, 0x70, 0x00, 0x00, 0x00,
}
