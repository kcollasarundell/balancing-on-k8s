// Code generated by protoc-gen-go.
// source: resolve.proto
// DO NOT EDIT!

/*
Package resolve is a generated protocol buffer package.

It is generated from these files:
	resolve.proto

It has these top-level messages:
	Source
	Address
*/
package resolve

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Source struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Source) Reset()                    { *m = Source{} }
func (m *Source) String() string            { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()               {}
func (*Source) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Source) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Address struct {
	Name string `protobuf:"bytes,1,opt,name=name" json:"name,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Address) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func init() {
	proto.RegisterType((*Source)(nil), "resolve.Source")
	proto.RegisterType((*Address)(nil), "resolve.address")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Resolve service

type ResolveClient interface {
	Resolve(ctx context.Context, in *Source, opts ...grpc.CallOption) (Resolve_ResolveClient, error)
}

type resolveClient struct {
	cc *grpc.ClientConn
}

func NewResolveClient(cc *grpc.ClientConn) ResolveClient {
	return &resolveClient{cc}
}

func (c *resolveClient) Resolve(ctx context.Context, in *Source, opts ...grpc.CallOption) (Resolve_ResolveClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_Resolve_serviceDesc.Streams[0], c.cc, "/resolve.resolve/resolve", opts...)
	if err != nil {
		return nil, err
	}
	x := &resolveResolveClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Resolve_ResolveClient interface {
	Recv() (*Address, error)
	grpc.ClientStream
}

type resolveResolveClient struct {
	grpc.ClientStream
}

func (x *resolveResolveClient) Recv() (*Address, error) {
	m := new(Address)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for Resolve service

type ResolveServer interface {
	Resolve(*Source, Resolve_ResolveServer) error
}

func RegisterResolveServer(s *grpc.Server, srv ResolveServer) {
	s.RegisterService(&_Resolve_serviceDesc, srv)
}

func _Resolve_Resolve_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(Source)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(ResolveServer).Resolve(m, &resolveResolveServer{stream})
}

type Resolve_ResolveServer interface {
	Send(*Address) error
	grpc.ServerStream
}

type resolveResolveServer struct {
	grpc.ServerStream
}

func (x *resolveResolveServer) Send(m *Address) error {
	return x.ServerStream.SendMsg(m)
}

var _Resolve_serviceDesc = grpc.ServiceDesc{
	ServiceName: "resolve.resolve",
	HandlerType: (*ResolveServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "resolve",
			Handler:       _Resolve_Resolve_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "resolve.proto",
}

func init() { proto.RegisterFile("resolve.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 111 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xe2, 0x2d, 0x4a, 0x2d, 0xce,
	0xcf, 0x29, 0x4b, 0xd5, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x87, 0x72, 0x95, 0x64, 0xb8,
	0xd8, 0x82, 0xf3, 0x4b, 0x8b, 0x92, 0x53, 0x85, 0x84, 0xb8, 0x58, 0xf2, 0x12, 0x73, 0x53, 0x25,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0xc0, 0x6c, 0x25, 0x59, 0x2e, 0xf6, 0xc4, 0x94, 0x94, 0xa2,
	0xd4, 0xe2, 0x62, 0x6c, 0xd2, 0x46, 0x96, 0x5c, 0x30, 0x73, 0x84, 0xf4, 0x10, 0x4c, 0x7e, 0x3d,
	0x98, 0x5d, 0x10, 0x93, 0xa5, 0x04, 0xe0, 0x02, 0x50, 0xc3, 0x0c, 0x18, 0x93, 0xd8, 0xc0, 0xee,
	0x30, 0x06, 0x04, 0x00, 0x00, 0xff, 0xff, 0xa5, 0xf6, 0x53, 0x98, 0x98, 0x00, 0x00, 0x00,
}
